class Solution {
public:
    int solver(int r1,int c1,int r2,int n,vector<vector<int>>& grid,vector<vector<vector<int>>>&dp)
    {
        int c2=r1+c1-r2;
        if(r1>=n || r2>=n || c1>=n || c2>=n || grid[r1][c1]==-1 || grid[r2][c2]==-1)
        {
            return -1e9;
        }
        if((r1==n-1 && c1==n-1)|| (r2==n-1 && c2==n-1))
        return grid[r1][c1];
        
        if(dp[r1][c1][r2]!=-1)
        return dp[r1][c1][r2];
        
        int ans=grid[r1][c1];
        if(r1!=r2)
        {
            ans+=grid[r2][c2];
        }
        
        int maxi=max(solver(r1+1,c1,r2+1,n,grid,dp),max(solver(r1,c1+1,r2,n,grid,dp),max(solver(r1+1,c1,r2,n,grid,dp),solver(r1,c1+1,r2+1,n,grid,dp))));
        return dp[r1][c1][r2]=ans+maxi;
                                                     
    }
    int cherryPickup(vector<vector<int>>& grid) 
    {
        int n=grid.size();
        vector<vector<vector<int>>>dp(n,vector<vector<int>>(n,vector<int>(n,-1)));
        return max(0,solver(0,0,0,n,grid,dp));
    }
};

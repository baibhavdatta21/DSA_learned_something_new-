Prob link-> https://leetcode.com/problems/longest-cycle-in-a-graph/


important factor is the value we hold in vis
vis=0 when  not visited
vis=1 when vistied but not in current use
vis=2+ when in current use 

   instead of redeclaring a vector/map again and again a single vector is enough.

    int maxi=-1;
    void solver(int i,int count,vector<int>adj[],vector<int>&vis)
    {
        vis[i]=count;
        
        for(auto it:adj[i])
        {
            if(vis[it]!=1 && vis[it]!=0)
            {
                maxi=max(maxi,count+1-vis[it]);
            }
            else if(vis[it]==0)
            {
                //cout<<vis[it]<<endl;
                solver(it,count+1,adj,vis);
            }
            
        }
        vis[i]=1;
    }
    int longestCycle(vector<int>& edges) 
    {
        int n=edges.size();
        vector<int>adj[n];
        vector<int>vis(n,0);
        for(int i=0;i<n;i++)
        {
             if(edges[i]!=-1)
            adj[i].push_back(edges[i]);
        }
        for(int i=0;i<n;i++)
        {
            solver(i,2,adj,vis); 
        }
        
        // for(int i=0;i<n;i++)
        // cout<<vis[i]<<" ";
        // cout<<endl;
        // if(maxi==0)
        // return -1;
        return maxi;
    }
